(()=>{"use strict";var n={669:(n,e,r)=>{r.d(e,{Z:()=>A});var t=r(15),o=r.n(t),i=r(645),s=r.n(i)()(o());s.push([n.id,".news__item {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin: 1rem auto;\r\n    margin-bottom: 1.6%;\r\n    background: #fff;\r\n    color: #333;\r\n    line-height: 1.4;\r\n    font-family: Arial, sans-serif;\r\n    border-radius: 5px;\r\n    overflow: hidden;\r\n}\r\n\r\n.news__item:hover .news__meta-photo {\r\n    transform: scale(1.3) rotate(3deg);\r\n}\r\n\r\n.news__item .news__meta {\r\n    position: relative;\r\n    height: 12.5rem;\r\n}\r\n\r\n.news__item .news__meta-photo {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    background-size: cover;\r\n    background-position: center;\r\n    transition: transform 0.2s;\r\n}\r\n\r\n.news__item .news__meta-details,\r\n.news__item .news__meta-details ul {\r\n    margin: auto;\r\n    padding: 0;\r\n    list-style: none;\r\n}\r\n\r\n.news__item .news__meta-details {\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: -120%;\r\n    margin: auto;\r\n    transition: left 0.2s;\r\n    background: rgba(0, 0, 0, 0.6);\r\n    color: #fff;\r\n    padding: 0.6rem;\r\n    width: 100%;\r\n    font-size: 0.9rem;\r\n}\r\n\r\n.news__item .news__description {\r\n    padding: 1rem;\r\n    background: #fff;\r\n    position: relative;\r\n    z-index: 1;\r\n}\r\n\r\n.news__item .news__description h2 {\r\n    line-height: 1;\r\n    margin: 0;\r\n    font-size: 1.7rem;\r\n}\r\n\r\n.news__item .news__description h3 {\r\n    font-size: 1rem;\r\n    font-weight: 300;\r\n    text-transform: uppercase;\r\n    color: #a2a2a2;\r\n    margin-top: 0.3rem;\r\n}\r\n\r\n.news__item .news__description .news__read-more {\r\n    text-align: right;\r\n}\r\n\r\n.news__item .news__description .news__read-more a {\r\n    color: #5ad67d;\r\n    display: inline-block;\r\n    position: relative;\r\n    text-decoration: none;\r\n    font-weight: 800;\r\n}\r\n\r\n.news__item .news__description .news__read-more a:after {\r\n    content: '→';\r\n    margin-left: -0.6rem;\r\n    opacity: 0;\r\n    vertical-align: middle;\r\n    transition: margin 0.3s, opacity 0.3s;\r\n}\r\n\r\n.news__item .news__description .news__read-more a:hover:after {\r\n    margin-left: 0.3rem;\r\n    opacity: 1;\r\n}\r\n\r\n.news__item p {\r\n    margin: 1rem 0 0;\r\n}\r\n\r\n.news__item p:first-of-type {\r\n    margin-top: 1.25rem;\r\n    position: relative;\r\n}\r\n\r\n.news__item p:first-of-type:before {\r\n    content: '';\r\n    position: absolute;\r\n    height: 0.3;\r\n    background: #5ad67d;\r\n    width: 2.2rem;\r\n    top: -0.75rem;\r\n    border-radius: 3px;\r\n}\r\n\r\n.news__item:hover .news__meta-details {\r\n    left: 0%;\r\n}\r\n\r\n@media (min-width: 640px) {\r\n    .news__item {\r\n        flex-direction: row;\r\n        max-width: 700px;\r\n    }\r\n\r\n    .news__item .news__meta {\r\n        flex-basis: 40%;\r\n        height: auto;\r\n    }\r\n\r\n    .news__item .news__description {\r\n        flex-basis: 60%;\r\n    }\r\n\r\n    .news__item .news__description:before {\r\n        -webkit-transform: skewX(-3deg);\r\n        transform: skewX(-3deg);\r\n        content: '';\r\n        background: #fff;\r\n        width: 1.9rem;\r\n        position: absolute;\r\n        left: -0.6rem;\r\n        top: 0;\r\n        bottom: 0;\r\n        z-index: -1;\r\n    }\r\n\r\n    .news__item.alt {\r\n        flex-direction: row-reverse;\r\n    }\r\n\r\n    .news__item.alt .news__description:before {\r\n        left: inherit;\r\n        right: -0.6rem;\r\n        -webkit-transform: skew(3deg);\r\n        transform: skew(3deg);\r\n    }\r\n\r\n    .news__item.alt .news__meta-details {\r\n        padding-left: 1.6rem;\r\n    }\r\n}\r\n","",{version:3,sources:["webpack://./src/components/view/news/news.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,sBAAsB;IACtB,iBAAiB;IACjB,mBAAmB;IACnB,gBAAgB;IAChB,WAAW;IACX,gBAAgB;IAChB,8BAA8B;IAC9B,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,QAAQ;IACR,SAAS;IACT,OAAO;IACP,sBAAsB;IACtB,2BAA2B;IAC3B,0BAA0B;AAC9B;;AAEA;;IAEI,YAAY;IACZ,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,SAAS;IACT,WAAW;IACX,YAAY;IACZ,qBAAqB;IACrB,8BAA8B;IAC9B,WAAW;IACX,eAAe;IACf,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,gBAAgB;IAChB,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,cAAc;IACd,SAAS;IACT,iBAAiB;AACrB;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,yBAAyB;IACzB,cAAc;IACd,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,cAAc;IACd,qBAAqB;IACrB,kBAAkB;IAClB,qBAAqB;IACrB,gBAAgB;AACpB;;AAEA;IACI,YAAY;IACZ,oBAAoB;IACpB,UAAU;IACV,sBAAsB;IACtB,qCAAqC;AACzC;;AAEA;IACI,mBAAmB;IACnB,UAAU;AACd;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,WAAW;IACX,mBAAmB;IACnB,aAAa;IACb,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,QAAQ;AACZ;;AAEA;IACI;QACI,mBAAmB;QACnB,gBAAgB;IACpB;;IAEA;QACI,eAAe;QACf,YAAY;IAChB;;IAEA;QACI,eAAe;IACnB;;IAEA;QACI,+BAA+B;QAC/B,uBAAuB;QACvB,WAAW;QACX,gBAAgB;QAChB,aAAa;QACb,kBAAkB;QAClB,aAAa;QACb,MAAM;QACN,SAAS;QACT,WAAW;IACf;;IAEA;QACI,2BAA2B;IAC/B;;IAEA;QACI,aAAa;QACb,cAAc;QACd,6BAA6B;QAC7B,qBAAqB;IACzB;;IAEA;QACI,oBAAoB;IACxB;AACJ",sourcesContent:[".news__item {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin: 1rem auto;\r\n    margin-bottom: 1.6%;\r\n    background: #fff;\r\n    color: #333;\r\n    line-height: 1.4;\r\n    font-family: Arial, sans-serif;\r\n    border-radius: 5px;\r\n    overflow: hidden;\r\n}\r\n\r\n.news__item:hover .news__meta-photo {\r\n    transform: scale(1.3) rotate(3deg);\r\n}\r\n\r\n.news__item .news__meta {\r\n    position: relative;\r\n    height: 12.5rem;\r\n}\r\n\r\n.news__item .news__meta-photo {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    background-size: cover;\r\n    background-position: center;\r\n    transition: transform 0.2s;\r\n}\r\n\r\n.news__item .news__meta-details,\r\n.news__item .news__meta-details ul {\r\n    margin: auto;\r\n    padding: 0;\r\n    list-style: none;\r\n}\r\n\r\n.news__item .news__meta-details {\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: -120%;\r\n    margin: auto;\r\n    transition: left 0.2s;\r\n    background: rgba(0, 0, 0, 0.6);\r\n    color: #fff;\r\n    padding: 0.6rem;\r\n    width: 100%;\r\n    font-size: 0.9rem;\r\n}\r\n\r\n.news__item .news__description {\r\n    padding: 1rem;\r\n    background: #fff;\r\n    position: relative;\r\n    z-index: 1;\r\n}\r\n\r\n.news__item .news__description h2 {\r\n    line-height: 1;\r\n    margin: 0;\r\n    font-size: 1.7rem;\r\n}\r\n\r\n.news__item .news__description h3 {\r\n    font-size: 1rem;\r\n    font-weight: 300;\r\n    text-transform: uppercase;\r\n    color: #a2a2a2;\r\n    margin-top: 0.3rem;\r\n}\r\n\r\n.news__item .news__description .news__read-more {\r\n    text-align: right;\r\n}\r\n\r\n.news__item .news__description .news__read-more a {\r\n    color: #5ad67d;\r\n    display: inline-block;\r\n    position: relative;\r\n    text-decoration: none;\r\n    font-weight: 800;\r\n}\r\n\r\n.news__item .news__description .news__read-more a:after {\r\n    content: '→';\r\n    margin-left: -0.6rem;\r\n    opacity: 0;\r\n    vertical-align: middle;\r\n    transition: margin 0.3s, opacity 0.3s;\r\n}\r\n\r\n.news__item .news__description .news__read-more a:hover:after {\r\n    margin-left: 0.3rem;\r\n    opacity: 1;\r\n}\r\n\r\n.news__item p {\r\n    margin: 1rem 0 0;\r\n}\r\n\r\n.news__item p:first-of-type {\r\n    margin-top: 1.25rem;\r\n    position: relative;\r\n}\r\n\r\n.news__item p:first-of-type:before {\r\n    content: '';\r\n    position: absolute;\r\n    height: 0.3;\r\n    background: #5ad67d;\r\n    width: 2.2rem;\r\n    top: -0.75rem;\r\n    border-radius: 3px;\r\n}\r\n\r\n.news__item:hover .news__meta-details {\r\n    left: 0%;\r\n}\r\n\r\n@media (min-width: 640px) {\r\n    .news__item {\r\n        flex-direction: row;\r\n        max-width: 700px;\r\n    }\r\n\r\n    .news__item .news__meta {\r\n        flex-basis: 40%;\r\n        height: auto;\r\n    }\r\n\r\n    .news__item .news__description {\r\n        flex-basis: 60%;\r\n    }\r\n\r\n    .news__item .news__description:before {\r\n        -webkit-transform: skewX(-3deg);\r\n        transform: skewX(-3deg);\r\n        content: '';\r\n        background: #fff;\r\n        width: 1.9rem;\r\n        position: absolute;\r\n        left: -0.6rem;\r\n        top: 0;\r\n        bottom: 0;\r\n        z-index: -1;\r\n    }\r\n\r\n    .news__item.alt {\r\n        flex-direction: row-reverse;\r\n    }\r\n\r\n    .news__item.alt .news__description:before {\r\n        left: inherit;\r\n        right: -0.6rem;\r\n        -webkit-transform: skew(3deg);\r\n        transform: skew(3deg);\r\n    }\r\n\r\n    .news__item.alt .news__meta-details {\r\n        padding-left: 1.6rem;\r\n    }\r\n}\r\n"],sourceRoot:""}]);const A=s},501:(n,e,r)=>{r.d(e,{Z:()=>A});var t=r(15),o=r.n(t),i=r(645),s=r.n(i)()(o());s.push([n.id,".sources {\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n.source {\r\n    display: block;\r\n    max-width: 40rem;\r\n    height: 3rem;\r\n    background: #f9f9f9;\r\n    border: 3px solid #fff;\r\n    border-radius: 5px;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/view/sources/sources.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,uBAAuB;AAC3B;AACA;IACI,cAAc;IACd,gBAAgB;IAChB,YAAY;IACZ,mBAAmB;IACnB,sBAAsB;IACtB,kBAAkB;AACtB",sourcesContent:[".sources {\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n.source {\r\n    display: block;\r\n    max-width: 40rem;\r\n    height: 3rem;\r\n    background: #f9f9f9;\r\n    border: 3px solid #fff;\r\n    border-radius: 5px;\r\n}\r\n"],sourceRoot:""}]);const A=s},767:(n,e,r)=>{r.d(e,{Z:()=>A});var t=r(15),o=r.n(t),i=r(645),s=r.n(i)()(o());s.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap);"]),s.push([n.id,"body {\r\n    color: #fff;\r\n    background: #212121;\r\n    font-family: 'Open Sans', sans-serif;\r\n}\r\n\r\n.header {\r\n    padding: 0.6rem 1.9rem;\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n.header__title {\r\n    font-size: 2.5rem;\r\n    font-weight: 800;\r\n    text-align: center;\r\n}\r\n\r\nfooter {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\nfooter .copyright {\r\n    font-size: 0.8rem;\r\n    color: #fff;\r\n    text-align: center;\r\n}\r\nfooter .copyright__link {\r\n    margin-top: 1rem;\r\n    display: block;\r\n    color: #fff;\r\n    text-decoration: none;\r\n}\r\nfooter .copyright__link:hover {\r\n    color: #f0f0f0;\r\n}\r\n\r\nfooter .copyright__logo {\r\n    width: 5rem;\r\n}\r\n","",{version:3,sources:["webpack://./src/global.css"],names:[],mappings:"AAEA;IACI,WAAW;IACX,mBAAmB;IACnB,oCAAoC;AACxC;;AAEA;IACI,sBAAsB;IACtB,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,iBAAiB;IACjB,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;AAC3B;AACA;IACI,iBAAiB;IACjB,WAAW;IACX,kBAAkB;AACtB;AACA;IACI,gBAAgB;IAChB,cAAc;IACd,WAAW;IACX,qBAAqB;AACzB;AACA;IACI,cAAc;AAClB;;AAEA;IACI,WAAW;AACf",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap');\r\n\r\nbody {\r\n    color: #fff;\r\n    background: #212121;\r\n    font-family: 'Open Sans', sans-serif;\r\n}\r\n\r\n.header {\r\n    padding: 0.6rem 1.9rem;\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n.header__title {\r\n    font-size: 2.5rem;\r\n    font-weight: 800;\r\n    text-align: center;\r\n}\r\n\r\nfooter {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\nfooter .copyright {\r\n    font-size: 0.8rem;\r\n    color: #fff;\r\n    text-align: center;\r\n}\r\nfooter .copyright__link {\r\n    margin-top: 1rem;\r\n    display: block;\r\n    color: #fff;\r\n    text-decoration: none;\r\n}\r\nfooter .copyright__link:hover {\r\n    color: #f0f0f0;\r\n}\r\n\r\nfooter .copyright__logo {\r\n    width: 5rem;\r\n}\r\n"],sourceRoot:""}]);const A=s},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r=n(e);return e[2]?"@media ".concat(e[2]," {").concat(r,"}"):r})).join("")},e.i=function(n,r,t){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(t)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(o[s]=!0)}for(var A=0;A<n.length;A++){var a=[].concat(n[A]);t&&o[a[0]]||(r&&(a[2]?a[2]="".concat(r," and ").concat(a[2]):a[2]=r),e.push(a))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var r=0,t=new Array(e);r<e;r++)t[r]=n[r];return t}n.exports=function(n){var r,t,o=(t=4,function(n){if(Array.isArray(n))return n}(r=n)||function(n,e){var r=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=r){var t,o,i=[],s=!0,A=!1;try{for(r=r.call(n);!(s=(t=r.next()).done)&&(i.push(t.value),!e||i.length!==e);s=!0);}catch(n){A=!0,o=n}finally{try{s||null==r.return||r.return()}finally{if(A)throw o}}return i}}(r,t)||function(n,r){if(n){if("string"==typeof n)return e(n,r);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?e(n,r):void 0}}(r,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],s=o[3];if(!s)return i;if("function"==typeof btoa){var A=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(A),c="/*# ".concat(a," */"),l=s.sources.map((function(n){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(n," */")}));return[i].concat(l).concat([c]).join("\n")}return[i].join("\n")}},242:(n,e,r)=>{r.r(e),r.d(e,{default:()=>s});var t=r(379),o=r.n(t),i=r(669);o()(i.Z,{insert:"head",singleton:!1});const s=i.Z.locals||{}},595:(n,e,r)=>{r.r(e),r.d(e,{default:()=>s});var t=r(379),o=r.n(t),i=r(501);o()(i.Z,{insert:"head",singleton:!1});const s=i.Z.locals||{}},427:(n,e,r)=>{r.r(e),r.d(e,{default:()=>s});var t=r(379),o=r.n(t),i=r(767);o()(i.Z,{insert:"head",singleton:!1});const s=i.Z.locals||{}},379:(n,e,r)=>{var t,o=function(){var n={};return function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}n[e]=r}return n[e]}}(),i=[];function s(n){for(var e=-1,r=0;r<i.length;r++)if(i[r].identifier===n){e=r;break}return e}function A(n,e){for(var r={},t=[],o=0;o<n.length;o++){var A=n[o],a=e.base?A[0]+e.base:A[0],c=r[a]||0,l="".concat(a," ").concat(c);r[a]=c+1;var d=s(l),f={css:A[1],media:A[2],sourceMap:A[3]};-1!==d?(i[d].references++,i[d].updater(f)):i.push({identifier:l,updater:p(f,e),references:1}),t.push(l)}return t}function a(n){var e=document.createElement("style"),t=n.attributes||{};if(void 0===t.nonce){var i=r.nc;i&&(t.nonce=i)}if(Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])})),"function"==typeof n.insert)n.insert(e);else{var s=o(n.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var c,l=(c=[],function(n,e){return c[n]=e,c.filter(Boolean).join("\n")});function d(n,e,r,t){var o=r?"":t.media?"@media ".concat(t.media," {").concat(t.css,"}"):t.css;if(n.styleSheet)n.styleSheet.cssText=l(e,o);else{var i=document.createTextNode(o),s=n.childNodes;s[e]&&n.removeChild(s[e]),s.length?n.insertBefore(i,s[e]):n.appendChild(i)}}function f(n,e,r){var t=r.css,o=r.media,i=r.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}var u=null,m=0;function p(n,e){var r,t,o;if(e.singleton){var i=m++;r=u||(u=a(e)),t=d.bind(null,r,i,!1),o=d.bind(null,r,i,!0)}else r=a(e),t=f.bind(null,r,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)};return t(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;t(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===t&&(t=Boolean(window&&document&&document.all&&!window.atob)),t));var r=A(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var t=0;t<r.length;t++){var o=s(r[t]);i[o].references--}for(var a=A(n,e),c=0;c<r.length;c++){var l=s(r[c]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}r=a}}}},275:(n,e)=>{var r;Object.defineProperty(e,"__esModule",{value:!0}),e.RequestMethod=void 0,(r=e.RequestMethod||(e.RequestMethod={})).GET="GET",r.POST="POST"},717:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.App=void 0,e.App=class{constructor(n,e){this.controller=n,this.view=e}start(){var n;null===(n=document.querySelector(".source"))||void 0===n||n.addEventListener("change",(n=>this.controller.getNews(n,(n=>this.view.drawNews(n))))),this.controller.getSources((n=>this.view.drawSources(n)))}}},853:(n,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AppLoader=void 0;const t=r(24);class o extends t.Loader{constructor(){super("https://nodenews.herokuapp.com/",{apiKey:"9d3346e23bff4a21946284df12d2f287"})}}e.AppLoader=o},842:(n,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AppController=void 0;const t=r(853);class o extends t.AppLoader{getSources(n){super.getResp({endpoint:"sources"},n)}getNews(n,e){const r=n.target;if(r){const n=r.value;"--"!==n&&super.getResp({endpoint:"everything",options:{sources:n}},e)}}}e.AppController=o},24:(n,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Loader=void 0;const t=r(275);e.Loader=class{constructor(n,e){this.baseLink=n,this.options=e}getResp({endpoint:n,options:e={}},r=(()=>{console.error("No callback for GET response")})){this.load(t.RequestMethod.GET,n,r,e)}errorHandler(n){if(!n.ok)throw 401!==n.status&&404!==n.status||console.log(`Sorry, but there is ${n.status} error: ${n.statusText}`),Error(n.statusText);return n}makeUrl(n,e){const r=Object.assign(Object.assign({},this.options),n);let t=`${this.baseLink}${e}?`;return Object.keys(r).forEach((n=>{t+=`${n}=${r[n]}&`})),t.slice(0,-1)}load(n,e,r,t={}){fetch(this.makeUrl(t,e),{method:n}).then(this.errorHandler).then((n=>n.json())).then((n=>r(n))).catch((n=>console.error(n)))}}},527:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AppView=void 0,e.AppView=class{constructor(n,e){this.news=n,this.sources=e}drawNews(n){if(n){const e=(null==n?void 0:n.articles)||[];this.news.draw(e)}else this.news.draw([])}drawSources(n){if(n){const e=(null==n?void 0:n.sources)||[];this.sources.draw(e)}else this.sources.draw([])}}},798:(n,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.News=void 0,r(242),e.News=class{draw(n){const e=(e=>n.length>=e)(10)?n.filter(((n,e)=>e<10)):n;const r=document.createDocumentFragment(),t=document.querySelector("#newsItemTemp"),o=document.querySelector(".news");e.forEach(((n,e)=>{var o,i;const s=null==t?void 0:t.content.cloneNode(!0);if(s){const t=s,A=t.querySelector(".news__meta-photo"),a=t.querySelector(".news__meta-author"),c=t.querySelector(".news__meta-author"),l=t.querySelector(".news__description-title"),d=t.querySelector(".news__description-source"),f=t.querySelector(".news__description-content");(n=>n%2==0)(e)&&(null===(o=t.querySelector(".news__item"))||void 0===o||o.classList.add("alt")),A&&(A.style.backgroundImage=`url(${n.urlToImage||"img/news_placeholder.jpg"})`),a&&(a.textContent=n.author||n.source.name),c&&(c.textContent=n.publishedAt.toString().slice(0,10).split("-").reverse().join("-")),l&&(l.textContent=n.title),d&&(d.textContent=n.source.name),f&&(f.textContent=n.description),null===(i=t.querySelector(".news__read-more a"))||void 0===i||i.setAttribute("href",n.url),r.append(s)}})),o&&(o.innerHTML="",o.appendChild(r))}}},53:(n,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Sources=void 0,r(595),e.Sources=class{draw(n){var e;const r=document.createDocumentFragment(),t=document.querySelector("#sourceItemTemp");n.forEach((({id:n,name:e})=>{const o=null==t?void 0:t.content.cloneNode(!0);if(o){const t=o.querySelector(".source__item");t&&(t.value=n,t.textContent=e),r.append(o)}})),null===(e=document.querySelector(".source"))||void 0===e||e.append(r)}}}},e={};function r(t){var o=e[t];if(void 0!==o)return o.exports;var i=e[t]={id:t,exports:{}};return n[t](i,i.exports,r),i.exports}r.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return r.d(e,{a:e}),e},r.d=(n,e)=>{for(var t in e)r.o(e,t)&&!r.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},r.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),r.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},(()=>{const n=r(717),e=r(842),t=r(527),o=r(798),i=r(53);r(427);const s=new o.News,A=new i.Sources,a=new t.AppView(s,A),c=new e.AppController;new n.App(c,a).start()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,